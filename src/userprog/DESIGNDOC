             +--------------------------+
             |          CS 140          |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----


>> Fill in the names and email addresses of your group members.

JuHyeon Jang	 <cjdool@kaist.ac.kr>
Dongeon Kim		 <dongeon97@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

   Signal handler

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

    tid_t process_execute (const char *file_name)
    {
        char *fn_copy2;             /* copy of file name */
        char *save_ptr;             /* saved pointer for strtok_r */
    }

    static void start_process (void *file_name_)
    {
        char *argv[30];             /* saved argmument list */
        int argc = 0;               /* argument count */
        char *token;                /* temp tokenized string */
        char *save_ptr;             /* saved pointer for strtok_r */
    }

    void argument_stack(char **argv, int argc, void **esp)

    /* push argmuents into stacks */

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

   기본적으로는 핀토스에서 제공하는 strtok_r()을 사용하여 구현했다.
   strtok_r의 delimiter로는 " "을 사용했다.
   strtok_r의 반환값이 NULL이 나올때 까지 파싱을 진행했다.
   각 token이 된 string들은 argv에 포인터 주소를 저장했다.
   각 token마다 argc 값을 증가시켜서 숫자를 카운트했다.
   
   이후 argv, argc, esp를 argument_stack함수로 넘겨주어서 해당 값을
   스택에 푸시했다.
   스택 푸시과정은 handout에서 제공하는 구조에 맞추어 구현했다.
   1) argv의 argument마다 스택위치를 옮기고, memcpy()를 진행한다.
   2) word-align을 위해 padding을 넣는다.
   3) argv의 저장위치를 저장한다.
   4) argv의 주소값과 argc의 값을 저장한다.
   5) 0으로 설정된 가짜 return address를 저장한다.

   stack page overflow를 막기위해서 최대 argv 갯수를 30개로 제한했다.
   argv가 30개를 넘으면 이후 page fault가 발생한다. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

    strtok_r()는 strtok()에 조금의 변경을 가했다.
    strtok()보다 1개의 파라미터를 더 줄 수 있는데, char** save_ptr을 줄 수 있다.
    strtok_r()은 다음 token의 위치를 저장하여 save_ptr로 반환한다.
    strtok은 이전 문자열을 기억하지만, strtok_r()은 save_ptr로 찾는 차이가 있다.
    이 때문에, race conditon을 strtok_r()에서는 방지할 수 있다.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

    UNIX 형식은 커널로 넘어오는 bad argument를 항상 방지 할 수 있기 때문에, 커널에서 
    처리해야 되는 양이 줄어든다. 따라서 커널을 좀더 가볍게 만들 수 있다.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

  <threads/thread.h>

    #define FDT_SIZE 128                     /* File Descriptor Table Size. */
    #define SIG_MAX 10
    
    struct sig {
        int num;
        void * sighandler;
    };

    struct thread {

        ...

        struct file *fdt[FDT_SIZE];         /* File Descriptor Table */
        int next_fd;                        /* Next file descriptor */

        struct thread * parent;             /* parent thread */
        struct list child_list;             /* child thread list */
        struct list_elem child_elem;        /* child list element */
        struct semaphore wait_sema;         /* wait until child process exit */ 
        struct semaphore load_sema;         /* wait until child process loaded */
        struct semaphore exit_sema;         /* wait until parent process get child's status */
        int wait_on;                        /* which pid thread waits on*/
        int exit_status;                    /* Exit status */
        int load_status;                    /* Load status */
        int by_exit;                        /* exit by exit() system call */

        struct sig sig[SIG_MAX];            /* Table for signal handling */

        ...
    }

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

    struct file *fdt[FDT_SIZE]를 통해서 열린 파일의 구조체를 관리한다.
    fdt의 각 원소는 struct *file을 가지므로, 파일의 구조체의 주소값을 가진다.
    각 open 시스템콜마다 해당 파일 구조체의 주소를 fdt에 저장하고, 각 close 시스템콜마다
    해당 파일 구조체의 주소를 NULL로 처리한다.
    또한 각 fdt는 thread 구조체 안에 있으므로, thread마다 독립적이다.
    현재 구현에서는 thread가 process와 1대1 대응 되므로 프로세스마다 각각의
    파일디스크립터 테이블(fdt)를 가진다.
    또한 next_fd를 두어서 다음 빈 테이블 위치를 쉽게 찾을 수 있게 한다.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

    syscall.c 파일 내의 get_argument() 함수에서, user stack을 가리키는 esp로부터
    system call parameter의 개수만큼 stack에서 data를 kernel로 가져옴
    가져올 때 user address인지 check_address()함수를 통해 모두 check함

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

   least number: 1~2번(페이지 단위로 읽을 때)
   greatest number: 1024번(4바이트 단위로 읽을 때)

   2byte case의 least number: 1~2번(페이지 단위로 읽을 때)
   2byte case의 greatest number: 1번(4바이트 단위로 읽을 때)

   요청 크기에 따라서, 4바이트 단위와 페이지 단위를 나누어서 실행
   (kmalloc이 slab allocator와 buddy allocator를 사용하는 것 처럼)

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

    parent process                  child process

    process_wait(child_tid)
        sema_down( &wait_sema )     ...
                                    ...
                                    thread_exit()
                                        sema_up( &wait_sema)
        ...                             sema_down( &exit_sema)
        get child status
        sema_up( &exit_sema)            ...
                                        ...
                                    
                                    process terminate


    tid를 parameter로 받아서 process_wait()함수 실행
    tid가 음수이거나, 현재 process의 child가 아니거나, 이미 wait에 들어왔던 tid라면
    return -1을 함
    예외 조건이 아니면 semaphore를 이용해서 child process가 exit할 때까지 block된다
    child가 exit할 때 sema_up을 해주면서 process_wait이 다시 진행됨
    이때 child process의 종료 상태를 확인해야하므로 child를 sema_down을 통해 대기시키고 
    child의 종료상태를 가져온 후에 sema_up을 해준다. child의 종료상태를 return함

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

    system call을 실행할 때 user영역을 가리키는 esp 와 각 system call의 argument
    개수만큼 data를 받아올 때 모두 valid address인지 check함
    잘못된 영역을 참조했을 경우, exit(-1)을 실행하는데 exit system call에서
    모든 resource를 free해줌 

    추후에 들어온 값들이 정상적인 값을 가지는 지 체크하는 부분을 각 시스템콜마다 구현했다.
    open() 시스템콜의 경우 전달되는 파일포인터의 값이 NULL포인터인지 확인하고, read()나 
    write() 시스템콜의 경우 넘어오는 fd가 정상적인 범위인지, buffer값의 주소영역은 정상적인지
    다시 확인한다.

--- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

   child process가 create된 후 child tid값을 받아서 child가 start_process() 함수에서
   load가 끝날때까지 semaphore를 사용해서 대기한다.
   load가 끝나면 child의 load_status에 load의 성공유무를 저장하고 
   parent process에서 그 값을 받아온 후 return한다.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

    - P calls wait(C) before C exits
        semaphore를 사용해서 C가 종료할 때까지 P가 대기
        race condition 없음, exit system call에서 모든 resource free해줌
    
    - P calls wait(C) after C exits
        P의 childlist에 C가 없음 -> get_child_process(C) 함수 NULL return
        wait() -> return -1, exit system call에서 모든 resource free해줌

    - P terminates w/o waiting, before C exits
        C의 parent가 없음 -> race condition 없음         
        exit system call에서 모든 resource free해줌
        
    - P terminates w/o waiting, after C exits
        위와 동일함
        
---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

    불필요한 memory할당을 하지 않기 위해 page를 할당하여 user data를 받아오지 않고
    kernel stack으로 직접 받아옴

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

   장점: next_fd를 증가하게만 구현하여, 탐색과정이 없어서 속도가 빠름

   단점: next_fd가 최대 FD 갯수에 도달하면 더이상 파일을 할당하지 못함

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

    tid_t와 pid_t의 1대1 맵핑을 바꾸지 않았습니다.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
